// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Microsoft.AspNetCore.Mvc;
using Refit;
using ServerInfra.Models;
using System.Threading.Tasks;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace RefitInternalGenerated
{
    [ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace HospitalControlado.Interfaces
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [ExcludeFromCodeCoverage]
    [DebuggerNonUserCode]
    [Preserve]
    partial class AutoGeneratedIAnestesistaAPI : IAnestesistaAPI        {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIAnestesistaAPI(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task<string> ReservarAnestesista(AnestesistaModel reserva,string guid)
        {
            var arguments = new object[] { reserva,guid };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReservarAnestesista", new Type[] { typeof(AnestesistaModel),typeof(string) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<bool> Commit(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Commit", new Type[] { typeof(string) });
            return (Task<bool>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<bool> RollBack(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("RollBack", new Type[] { typeof(string) });
            return (Task<bool>)func(Client, arguments);
        }

    }
}

namespace HospitalControlado.Interfaces
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [ExcludeFromCodeCoverage]
    [DebuggerNonUserCode]
    [Preserve]
    partial class AutoGeneratedICirurgiaoAPI : ICirurgiaoAPI        {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedICirurgiaoAPI(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task<string> ReservarCirurgiao(CirurgiaoModel reserva,string guid)
        {
            var arguments = new object[] { reserva,guid };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReservarCirurgiao", new Type[] { typeof(CirurgiaoModel),typeof(string) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<bool> Commit(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Commit", new Type[] { typeof(string) });
            return (Task<bool>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<bool> RollBack(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("RollBack", new Type[] { typeof(string) });
            return (Task<bool>)func(Client, arguments);
        }

    }
}
